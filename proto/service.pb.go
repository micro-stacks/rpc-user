// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/service.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("proto/service.proto", fileDescriptor_c33392ef2c1961ba) }

var fileDescriptor_c33392ef2c1961ba = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0x41, 0x4a, 0x91, 0xe0, 0x29, 0x15, 0xc5, 0x2d, 0x78, 0x17, 0x31, 0x0b, 0x7a, 0x10,
	0x41, 0x0f, 0x16, 0x04, 0x0f, 0x3d, 0x48, 0x41, 0x0f, 0xde, 0x62, 0x3a, 0xa6, 0xc1, 0xdd, 0x9d,
	0x38, 0x93, 0x58, 0xfa, 0xf3, 0xfc, 0x67, 0x92, 0xdd, 0x14, 0x17, 0x97, 0x7a, 0xda, 0x9d, 0xf7,
	0xcd, 0x7b, 0x03, 0x2f, 0x62, 0xe2, 0x09, 0x03, 0x96, 0x0c, 0xf4, 0xe5, 0x0c, 0xa8, 0x76, 0x92,
	0x22, 0x32, 0x50, 0xf7, 0x5f, 0x4c, 0x2d, 0xa2, 0xad, 0xa0, 0x6c, 0xa7, 0xb7, 0xf8, 0x5e, 0x42,
	0xed, 0xc3, 0x26, 0xc3, 0xd3, 0xbf, 0x70, 0x4d, 0xda, 0x7b, 0x20, 0xce, 0x3c, 0xa7, 0xd7, 0xc0,
	0xac, 0x6d, 0x4e, 0xbf, 0xfc, 0xde, 0x13, 0xa3, 0x67, 0x06, 0x92, 0x8f, 0xe2, 0x60, 0x01, 0xd6,
	0x71, 0x00, 0x6a, 0xe7, 0xa9, 0xfa, 0xbd, 0xab, 0xfa, 0x64, 0x01, 0x9f, 0xc5, 0x6e, 0xc8, 0x5e,
	0xde, 0x88, 0xfd, 0x39, 0x5a, 0xd7, 0x3c, 0xad, 0x97, 0xf2, 0xb8, 0xbf, 0xb8, 0x55, 0x53, 0xc2,
	0xe1, 0x00, 0x24, 0xeb, 0x9d, 0x10, 0xdd, 0xd2, 0x0a, 0x1b, 0x90, 0x27, 0x43, 0x73, 0xd2, 0x77,
	0xdb, 0x6f, 0xc5, 0x78, 0x8e, 0x16, 0x63, 0x90, 0x47, 0xaa, 0x2b, 0x43, 0x6d, 0xcb, 0x50, 0x0f,
	0xa9, 0xa9, 0xa2, 0x18, 0xe8, 0x33, 0xc4, 0xea, 0x45, 0x57, 0x11, 0xe4, 0xb5, 0x18, 0xdd, 0xc7,
	0xb0, 0x92, 0x93, 0x7e, 0x76, 0x52, 0xd2, 0xc1, 0x7f, 0x8c, 0xb3, 0xf3, 0xd7, 0x33, 0x83, 0x4b,
	0x50, 0xba, 0x72, 0x9b, 0xd8, 0x28, 0x83, 0x75, 0x59, 0x3b, 0x43, 0xc8, 0x41, 0x9b, 0x8f, 0x92,
	0xbc, 0xb9, 0x48, 0x81, 0xf9, 0x5d, 0xc6, 0xed, 0xe7, 0xea, 0x27, 0x00, 0x00, 0xff, 0xff, 0xba,
	0xc4, 0x1d, 0x2a, 0xec, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserClient interface {
	// 注册用户
	RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserRsp, error)
	// 密码登录
	LoginPwd(ctx context.Context, in *LoginPwdReq, opts ...grpc.CallOption) (*LoginRsp, error)
	// 手机登录
	LoginPhone(ctx context.Context, in *LoginPhoneReq, opts ...grpc.CallOption) (*LoginRsp, error)
	// 注销登录
	Logout(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
	// 验证登录
	Auth(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserRsp, error) {
	out := new(RegisterUserRsp)
	err := c.cc.Invoke(ctx, "/user.proto.User/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) LoginPwd(ctx context.Context, in *LoginPwdReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, "/user.proto.User/LoginPwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) LoginPhone(ctx context.Context, in *LoginPhoneReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, "/user.proto.User/LoginPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Logout(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, "/user.proto.User/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Auth(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, "/user.proto.User/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
type UserServer interface {
	// 注册用户
	RegisterUser(context.Context, *RegisterUserReq) (*RegisterUserRsp, error)
	// 密码登录
	LoginPwd(context.Context, *LoginPwdReq) (*LoginRsp, error)
	// 手机登录
	LoginPhone(context.Context, *LoginPhoneReq) (*LoginRsp, error)
	// 注销登录
	Logout(context.Context, *empty.Empty) (*wrappers.BoolValue, error)
	// 验证登录
	Auth(context.Context, *AuthReq) (*wrappers.BoolValue, error)
}

// UnimplementedUserServer can be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (*UnimplementedUserServer) RegisterUser(ctx context.Context, req *RegisterUserReq) (*RegisterUserRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (*UnimplementedUserServer) LoginPwd(ctx context.Context, req *LoginPwdReq) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginPwd not implemented")
}
func (*UnimplementedUserServer) LoginPhone(ctx context.Context, req *LoginPhoneReq) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginPhone not implemented")
}
func (*UnimplementedUserServer) Logout(ctx context.Context, req *empty.Empty) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (*UnimplementedUserServer) Auth(ctx context.Context, req *AuthReq) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.proto.User/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RegisterUser(ctx, req.(*RegisterUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_LoginPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginPwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).LoginPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.proto.User/LoginPwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).LoginPwd(ctx, req.(*LoginPwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_LoginPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).LoginPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.proto.User/LoginPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).LoginPhone(ctx, req.(*LoginPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.proto.User/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Logout(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.proto.User/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Auth(ctx, req.(*AuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.proto.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _User_RegisterUser_Handler,
		},
		{
			MethodName: "LoginPwd",
			Handler:    _User_LoginPwd_Handler,
		},
		{
			MethodName: "LoginPhone",
			Handler:    _User_LoginPhone_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _User_Logout_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _User_Auth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
